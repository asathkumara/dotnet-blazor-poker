@inject IJSRuntime JS;
@inject GameStateManager GameStateManager;

@if(IsSelectable)
{
    <picture>
        <source 
            type="image/webp"
            srcset=@(GetSource("webp"))
        />

        <img 
            @ref="_cardReference"
            class="card" 
            src=@(GetSource("png")) 
            alt=@(GetAltText()) 
            data-tilt
            data-tilt-scale="1.2"
            draggable="false"
            tabindex="0"
            aria-label=@($"{_cardLabel ?? $"Select {GetAltText()}"}")
            role="button"
            @onclick=@(() => ToggleSelectedCard())
            @onkeydown=@((keyboardEvent) => {
                    if (keyboardEvent.Code == "Space" || keyboardEvent.Code == "Enter")
                    {
                        ToggleSelectedCard();
                    }
                }
            )
        />
    </picture>
    
}
else
{
     <picture>
        <source 
            type="image/webp"
            srcset=@(GetSource("webp"))
        />

        <img 
            @ref="_cardReference"
            class="card" 
            src=@(GetSource("png")) 
            alt=@(GetAltText()) 
            data-tilt
            data-tilt-scale="1.2"
            draggable="false"
        />
    </picture>
}

@code 
{
    private IJSObjectReference _vanillaTilt;
    private IJSObjectReference _cardHelpers;
    private ElementReference _cardReference;
    private bool _isSelected;
    private string _cardLabel;

    [Parameter]
    public Card? Card { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public bool IsSelectable { get; set; } = false;

    [Parameter]
    public int Index { get; set; }

    /// <summary>
    /// Once the component is mounted, import JavaScript libraries for dealing with card functionality.
    /// </summary>
    /// <param name="firstRender">True if it's the first render; False otherwise.</param>
    /// <returns>A task to be awaited</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _vanillaTilt = await JS.InvokeAsync<IJSObjectReference>("import", "././lib/vanilla-tilt/vanilla-tilt.min.js" );
            _cardHelpers = await JS.InvokeAsync<IJSObjectReference>("import", "././lib/components/cardHelpers.js" );

            await _vanillaTilt.InvokeVoidAsync("VanillaTilt.init", _cardReference);
        }

        if (GameStateManager.CurrentState == GameState.Draw)
        {
            await _cardHelpers.InvokeVoidAsync("setPointer", _cardReference);
        }
    }

    /// <summary>
    /// Gets the image source with the given extension
    /// </summary>
    /// <param name="extension">The extension. Either png or webp.</param>
    /// <returns>If the hand is visible (face-up), face up cards are returned. Otherwise, the cover of the card is returned.</returns>
    private string GetSource(string extension)
    {

        if (IsVisible)
        {
            return $"resources/images/cards/{Card}.{extension}";
        }

        return $"resources/images/cards/cover.{extension}";
    }

    /// <summary>
    /// Gets the image alt text
    /// </summary>
    /// <returns>If the hand is visible (face-up), the rank and suit of the card is returned. Otherwise, "card back" is returned./returns>
    private string GetAltText()
    {
        if (IsVisible)
        {
            return $"The {Card.Rank} of {Card.Suit} card";
        }

        return "The card back";
    }

    /// <summary>
    /// Toggles the card for selection.
    /// </summary>
    /// <remarks>A brightness filter indicates selection and when selected, the index of the card is tracked.</remarks>
    private async void ToggleSelectedCard()
    {
        _isSelected = !_isSelected;

        if (_isSelected && GameStateManager.CurrentDiscardIndices.Count() < 3)
        {
            await _cardHelpers.InvokeVoidAsync("setBrightnessFilter", _cardReference); 
            GameStateManager.CurrentDiscardIndices.Add(Index);
            _cardLabel = $"{GetAltText()} selected";
            StateHasChanged();
        }
        else
        {
            await _cardHelpers.InvokeVoidAsync("resetFilter", _cardReference);
            GameStateManager.CurrentDiscardIndices.Remove(Index);
            _cardLabel = $"Select {GetAltText()}";
            StateHasChanged();
        }
    }
}
