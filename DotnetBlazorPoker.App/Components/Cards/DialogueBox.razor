@implements IDisposable
@inject GameStateManager GameStateManager

<aside class="dialogue-box" 
        @ref=@_dialogueRef
        tabindex="0" 
        aria-label=@($"Dialogue from dealer. Dealer says {DialogueText}")
>
    <picture aria-hidden="true">
        <source 
            type="image/webp"
            srcset=@(GetSource("webp"))
        />
        <img class="dialogue-avatar" src=@(GetSource("png")) alt="A picture of the poker dealer" draggable="false" />
    </picture>

    <div class="dialogue">
        <p class="speaker">@Speaker</p>
        <p class="dialogue-text">@($"\"{DialogueText}\"")</p>
        <button class="dialogue-button" @onclick=@HideDialogueBox>OK</button>
    </div>
</aside>

@code 
{
    private ElementReference _dialogueRef;

    [Parameter]
    public string Speaker { get; set; } = "Dealer:";

    [Parameter]
    public string DialogueText { get; set; } = "Hello World";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GameStateManager.OnGameStateChange += ShowDialogueBox;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string dialogueDisplay = await _dialogueRef.GetStyleAsync<string>("display");

        if (!dialogueDisplay.Equals("none"))
        {
            await _dialogueRef.SetFocusAsync();    
        }   
    }

    private void HideDialogueBox()
    {
        _dialogueRef.SetStyle("display", "none");
    }

    private void ShowDialogueBox()
    {
        _dialogueRef.SetStyle("display", "flex"); 
    }

    private string GetSource(string extension)
    {
        return $"resources/images/jack-avatar.{extension}";
    } 

    public void Dispose()
    {
        GameStateManager.OnGameStateChange -= ShowDialogueBox;
    }
}