@page "/start"
@inject GameStateManager GameStateManager
@inject NavigationManager Navigator
@inject IJSRuntime JS;


<main class="content">
    <Logo />
    <DialogueBox DialogueText=@GameStateManager.CurrentDialogue/>

     <section class="user-balance">
        <h1>Balance</h1>
        <p @ref=@_balanceReference>@GameStateManager.Player.Balance</p>
    </section>

      <aside class="left-info">
        <article class="poker-hand-info">
            <h2>Royal Flush</h2>
            <p>0.9</p>
        </article>

        <article class="poker-hand-info">
            <h2>Straight Flush</h2>
            <p>0.8</p>
        </article>

        <article class="poker-hand-info">
            <h2>4 of a kind</h2>
            <p>0.7</p>
        </article>

        <article class="poker-hand-info">
            <h2>Full House</h2>
            <p>0.6</p>
        </article>
    </aside>
    
    <aside class="right-info">
        <article class="poker-hand-info">
            <h2>Straight</h2>
            <p>0.5</p>
        </article>

        <article class="poker-hand-info">
            <h2>3 of a kind</h2>
            <p>0.4</p>
        </article>

        <article class="poker-hand-info">
            <h2>2 of a kind</h2>
            <p>0.3</p>
        </article>

        <article class="poker-hand-info">
            <h2>Two Pair</h2>
            <p>0.2</p>
        </article>
    </aside>

    @if (GameStateManager.CurrentState == GameState.Deal)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=false />

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => GameStateManager.AdvanceGameState())>Reveal</button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.Bet)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => ShowBetMenu())>Bet</button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.Draw)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true IsSelectable=true/>

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => GameStateManager.AdvanceGameState())>Confirm</button>
         </section>
    }

    @if (GameStateManager.CurrentState == GameState.Showdown)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => GameStateManager.AdvanceGameState())>Deal</button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.GameOver)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => GameStateManager.InitializeGameState())>Buy In</button>
        </section>
    }

    <button class="exit-game" @onclick=@(() => NavigateTo("/"))>X</button>

    @if (IsBetMenuVisible)
    {
        <BetMenu OnClose=@HideBetMenu 
        />
    }

</main>

@code 
{
    private IJSObjectReference _animationHelpers;
    private ElementReference _balanceReference;

    public bool IsBetMenuVisible { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IsBetMenuVisible = false;

        GameStateManager.OnGameStateChange += HandleGameState;
        GameStateManager.OnGameStateChange += StateHasChanged;

        GameStateManager.InitializeGameState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _animationHelpers = await JS.InvokeAsync<IJSObjectReference>("import", "././lib/components/animationHelpers.js" );
    }

    private void HandleGameState()
    {
        Action currentStateHandler = GameStateManager.GameStateHandlers[GameStateManager.CurrentState];
        currentStateHandler();
    }

    private void ShowBetMenu()
    {
        if (GameStateManager.CurrentState == GameState.Bet)
        {
            IsBetMenuVisible = true;
        }
    }

    private void HideBetMenu()
    {
        IsBetMenuVisible = false;
    }

    private async void IncrementBalance()
    {
        await _animationHelpers.InvokeVoidAsync("incrementCounter", _balanceReference);
    }

     private async void DecrementBalance(int target)
    {
        await  _animationHelpers.InvokeVoidAsync("decrementCounter", _balanceReference, target);
    }

    private void NavigateTo(string uri)
    {
        Navigator.NavigateTo(uri);
    }

    private void ExitGame()
    {
        Navigator.NavigateTo("/");
    }

    public void Dispose()
    {
        GameStateManager.OnGameStateChange -= HandleGameState;
        GameStateManager.OnGameStateChange -= StateHasChanged;
    }
}
