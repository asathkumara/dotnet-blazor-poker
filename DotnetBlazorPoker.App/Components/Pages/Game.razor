@page "/start"
@inject GameStateManager GameStateManager
@inject NavigationManager Navigator
@inject IJSRuntime JS;


<PageTitle>Dotnet Blazor Poker - Game</PageTitle>


<main class="content"
      role="application" 
      tabindex="0"
      aria-label="Simplified five card draw poker game. Follow the dealer's dialogue for instructions on every round."
>
    <Logo />
    <DialogueBox DialogueText=@GameStateManager.CurrentDialogue/>
    
    <section class="game-controls" tabindex="0" aria-label="Game Controls">
        <button class="button-secondary settings-button game-control"
                aria-label="View Settings"
                disabled
        >
            <img src="resources/images/icons/settings-icon-512x512.png" alt="Cogwheel icon" draggable="false" />
        </button>

        <button class="button-secondary get-help-button game-control"
                aria-label="Get Help"
                disabled
        >       
            <img src="resources\images\icons\help-icon-289x512.png" alt="Question mark icon" draggable="false" />
        </button>

        <button class="button-secondary exit-button game-control"
                aria-label="Exit Game"
                @onclick=@(() => NavigateTo("/"))
        >
            <img src="resources/images/icons/exit-icon-512x512.png" alt="Capital X icon" draggable="false" />
        </button>
    </section>

     <section class="user-balance" tabindex="0" aria-label=@($"Balance display. Your current balance is {@GameStateManager.Player.Balance} credits.")>
        <h1>Balance</h1>
        <p @ref=@_balanceReference>@GameStateManager.Player.Balance</p>
    </section>

      <aside class="left-info" tabindex="0" aria-label="Royal Flush through Full House scoring information.">
        <article class="poker-hand-info" tabindex="0" aria-label="Royal flush multiplier is 0.9.">
            <p>Royal Flush</p>
            <p>0.9</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Straight flush multiplier is 0.8.">
            <p>Straight Flush</p>
            <p>0.8</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Four of a kind multiplier is 0.7.">
            <p>4 of a kind</p>
            <p>0.7</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Full house multiplier is 0.6.">
            <p>Full House</p>
            <p>0.6</p>
        </article>
    </aside>
    
    <aside class="right-info" tabindex="0" aria-label="Straight through Two Pair scoring information.">
        <article class="poker-hand-info"  tabindex="0" aria-label="Straight multiplier is 0.5.">
            <p>Straight</p>
            <p>0.5</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Three of a kind multiplier is 0.4.">
            <p>3 of a kind</p>
            <p>0.4</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Two of a kind multiplier is 0.3.">
            <p>2 of a kind</p>
            <p>0.3</p>
        </article>

        <article class="poker-hand-info"  tabindex="0" aria-label="Two pair multiplier is 0.2.">
            <p>Two Pair</p>
            <p>0.2</p>
        </article>
    </aside>

    @if (GameStateManager.CurrentState == GameState.Deal)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=false />

        <section class="user-actions">
            <button class="user-action button-primary" 
                    aria-label="Reveal your hand"
                    @onclick=@(() => GameStateManager.AdvanceGameState())
            >
                Reveal
            </button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.Bet)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary" 
                    aria-label="Place your bets"
                    @onclick=@(() => ShowBetMenu())
            >
                Bet
            </button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.Draw)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true IsSelectable=true/>

        <section class="user-actions">
            <button class="user-action button-primary"
                    aria-label=@($"Confirm your selection of cards. If none are selected, you will not redraw.")
                    @onclick=@(() => GameStateManager.AdvanceGameState())
            >
                Confirm
            </button>
         </section>
    }

    @if (GameStateManager.CurrentState == GameState.Showdown)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary"
                    aria-label="Start another hand"
                    @onclick=@(() => GameStateManager.AdvanceGameState())
            >
                Deal
            </button>
        </section>
    }

    @if (GameStateManager.CurrentState == GameState.GameOver)
    {
        <PlayerHand Hand=@GameStateManager.Player.Hand IsVisible=true />

        <section class="user-actions">
            <button class="user-action button-primary" @onclick=@(() => GameStateManager.InitializeGameState())>Buy In</button>
        </section>
    }


    @if (IsBetMenuVisible)
    {
        <BetMenu OnClose=@HideBetMenu/>
    }

</main>

@code 
{
    private IJSObjectReference _animationHelpers;
    private ElementReference _mainRef;
    private ElementReference _balanceReference;
    private ElementReference _dialogueReference;

    public bool IsBetMenuVisible { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IsBetMenuVisible = false;

        GameStateManager.OnGameStateChange += HandleGameState;
        GameStateManager.OnGameStateChange += StateHasChanged;

        GameStateManager.InitializeGameState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _animationHelpers = await JS.InvokeAsync<IJSObjectReference>("import", "././lib/components/animationHelpers.js" );
        }
    }

    private void HandleGameState()
    {
        Action currentStateHandler = GameStateManager.GameStateHandlers[GameStateManager.CurrentState];
        currentStateHandler();
    }

    private async void ShowBetMenu()
    {
        if (GameStateManager.CurrentState == GameState.Bet)
        {
            IsBetMenuVisible = true;
        }
    }

    private void HideBetMenu()
    {
        IsBetMenuVisible = false;
    }

    private async void IncrementBalance()
    {
        await _animationHelpers.InvokeVoidAsync("incrementCounter", _balanceReference);
    }

     private async void DecrementBalance(int target)
    {
        await  _animationHelpers.InvokeVoidAsync("decrementCounter", _balanceReference, target);
    }

    private void NavigateTo(string uri)
    {
        Navigator.NavigateTo(uri);
    }

    private void ExitGame()
    {
        Navigator.NavigateTo("/");
    }

    public void Dispose()
    {
        GameStateManager.OnGameStateChange -= HandleGameState;
        GameStateManager.OnGameStateChange -= StateHasChanged;
    }
}
