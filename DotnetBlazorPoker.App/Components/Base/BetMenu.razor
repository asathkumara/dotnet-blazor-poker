@inject IJSRuntime JS;
@inject GameStateManager GameStateManager;

<div class="bet-menu">
    <button class="exit-bet-menu" @onclick=@OnClose>X</button>

    <section class="bet-chips">
        <picture>
            <source 
                type="image/webp"
                srcset=@(GetSource("webp", 1))
            />
            
            <img 
                @ref="pokerChip1"
                class="poker-chip"
                src=@(GetSource("png", 1)) 
                alt="Poker chip worth 1 credit" 
                @onclick=@((mouseEvent) => BetHandler(mouseEvent, 1)) 
                @oncontextmenu:preventDefault
                @oncontextmenu=@((mouseEvent) => BetHandler(mouseEvent, 1))
                draggable="false"
                data-tilt
                data-tilt-scale="1.2"
            />
        </picture>
        

        <picture>
            <source 
                type="image/webp"
                srcset=@(GetSource("webp", 5))
            />

             <img 
                @ref="pokerChip5"
                class="poker-chip"
                src=@(GetSource("png", 5))
                alt="Poker chip worth 5 credits" 
                @onclick=@((mouseEvent) => BetHandler(mouseEvent, 5))
                @oncontextmenu:preventDefault
                @oncontextmenu=@((mouseEvent) => BetHandler(mouseEvent, 5))
                draggable="false"
                data-tilt
                data-tilt-scale="1.2"
            />
        </picture>

        <picture>
            <source 
                type="image/webp"
                srcset=@(GetSource("webp", 25))
            />

            <img 
                @ref="pokerChip25"
                class="poker-chip"
                src=@(GetSource("png", 25)) 
                alt="Poker chip worth 25 credits" 
                @onclick=@((mouseEvent) => BetHandler(mouseEvent, 25)) 
                @oncontextmenu:preventDefault
                @oncontextmenu=@((mouseEvent) => BetHandler(mouseEvent, 25))
                draggable="false"
                data-tilt
                data-tilt-scale="1.2"
            />
        </picture>

        <picture>
            <source 
                type="image/webp"
                srcset=@(GetSource("webp", 100))
            />

            <img 
                @ref="pokerChip100"
                class="poker-chip"
                src=@(GetSource("png", 100)) 
                alt="Poker chip worth 100 credits" 
                @onclick=@((mouseEvent) => BetHandler(mouseEvent, 100))
                @oncontextmenu:preventDefault
                @oncontextmenu=@((mouseEvent) => BetHandler(mouseEvent, 100))
                draggable="false"
                data-tilt
                data-tilt-scale="1.2"
            />
        </picture>
       

        

        
    </section>

    <section class="bet-display">
        <h2 class="bet-display-current">You Are Betting @CurrentBet Credits</h2>
        <p class="bet-display-info"><kdb>Left Click</kdb> (+)  <kdb>Right Click</kdb> (-)</p>
    </section>

    <button class="bet-confirm-button" @onclick=@ConfirmBet>Confirm</button>
</div>

@code 
{
    private IJSObjectReference _vanillaTilt;
    private ElementReference pokerChip1;
    private ElementReference pokerChip5;
    private ElementReference pokerChip25;
    private ElementReference pokerChip100;

    [Parameter]
    public EventCallback OnClose { get; set; }

    //[Parameter]
    //public EventCallback<int> OnCreditsReceived { get; set; }

    public int CurrentBet { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _vanillaTilt = await JS.InvokeAsync<IJSObjectReference>("import", "././lib/vanilla-tilt/vanilla-tilt.min.js" );

            await _vanillaTilt.InvokeVoidAsync("VanillaTilt.init", pokerChip1);
            await _vanillaTilt.InvokeVoidAsync("VanillaTilt.init", pokerChip5);
            await _vanillaTilt.InvokeVoidAsync("VanillaTilt.init", pokerChip25);
            await _vanillaTilt.InvokeVoidAsync("VanillaTilt.init", pokerChip100);
        }
    }

    private void BetHandler(MouseEventArgs mouseEvent, int credits)
    {
        switch (mouseEvent.Button)
        {
            case 0:
                IncreaseBet(credits);
                break;
            case 2:
                DecreaseBet(credits);
                break;

            default:
                break;
        }
    }

    private void IncreaseBet(int credits)
    {
        if ((CurrentBet + credits) > GameStateManager.Player.Balance)
        {
            return;
        }

        CurrentBet += credits;
    }

    private void DecreaseBet(int credits)
    {
        if ((CurrentBet - credits) < 0)
        {
            return;
        }

        CurrentBet -= credits;
    }

    private void ConfirmBet()
    {
        GameStateManager.CurrentBet = CurrentBet;
        //OnCreditsReceived.InvokeAsync((int)GameStateManager.Player.Balance  - CurrentBet);
        GameStateManager.AdvanceGameState();
        OnClose.InvokeAsync();
    }

    private string GetSource(string extension, int chipValue)
    {
        return $"resources/images/chips/poker-chip-{chipValue}-120x120.{extension}";
    }


}
